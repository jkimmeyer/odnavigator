{"version":3,"sources":["webpack://Redoc/webpack/bootstrap","webpack://Redoc/./node_modules/lunr/lunr.js","webpack://Redoc/./src/services/SearchWorker.worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","build","version","utils","warn","this","message","console","asString","obj","toString","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","indexOf","fieldRef","slice","undefined","idf","posting","documentCount","documentsWithTerm","keys","length","x","Math","log","abs","Token","str","metadata","update","fn","clone","tokenizer","Array","isArray","map","t","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","push","position","index","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","elements","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","val","upsert","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","a","b","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","noEditNode","char","deletionNode","frame","pop","substitutionNode","insertionNode","transposeNode","charA","charB","wildcardFound","next","prefix","edge","concat","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","clauses","terms","usePipeline","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","field","fieldPosting","matchingDocumentRefs","termField","boost","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","matchingFieldRefs","results","matches","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","number","k1","doc","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","key","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","options","QueryParseError","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parseField","parseTerm","errorMessage","possibleFields","f","nextLexeme","parseEditDistance","parseBoost","parseInt","isNaN","lunr__WEBPACK_IMPORTED_MODULE_0__","__assign","assign","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","e","rejected","done","then","__generator","body","y","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","Worker","toJS","store","resolveIndex","expandTerm","title","description","item","_a","split","exp","res","addEventListener","data","method","params","__webpack_exports__","postMessage","error"],"mappings":"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AEAC,GADAW,EAAAR,EAAAS,KAAAb,IACA,GAEAK,EAAAjL,EACAkL,EAAAjK,IAFA+J,EAAAjL,GAGAuL,KAAAT,IAAAI,EAAAK,KAAAT,KAAAK,EAAAI,KAAAT,MACAD,EAAAC,IAiBA,OAZAI,EAAAlL,GADAiL,EAAAhK,GAEAsK,KAAAV,IAAAK,EAAAK,KAAAV,KACAI,EAAA1K,EACAsK,IAAAW,QAAAP,EAAA,KAKA,KAAAD,IACAH,EAAAG,EAAAxG,cAAAqG,EAAAQ,OAAA,IAGAR,GAGA,SAAA7D,GACA,OAAAA,EAAAhD,OAAA7C,KAIAC,EAAAiE,SAAAI,iBAAArE,EAAAQ,QAAA;;;;IAkBAR,EAAAuK,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,OAAA,SAAAnF,EAAAoF,GAEA,OADApF,EAAAoF,KACApF,OAGA,gBAAAK,GACA,GAAAA,GAAA6E,EAAA7E,EAAAzE,cAAAyE,EAAAzE,WAAA,OAAAyE,IAgBA5F,EAAAO,eAAAP,EAAAuK,wBACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGAvK,EAAAiE,SAAAI,iBAAArE,EAAAO,eAAA;;;;IA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","file":"00e46eb5635112e444bb.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.6\n * Copyright (C) 2018 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.1.6\"\n/*!\n * lunr.utils\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === void 0 || result === '') continue\n\n      if (result instanceof Array) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2018 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null)\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field\n\n          /*\n           * To support field level boosts a query vector is created per\n           * field. This vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           *\n           * If the query vector for this field does not exist yet it needs\n           * to be created.\n           */\n          if (queryVectors[field] === undefined) {\n            queryVectors[field] = new lunr.Vector\n          }\n\n          /*\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef,\n        fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref]\n\n  this.documentCount += 1\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var field = this._fields[i]\n    accumulator[field] = accumulator[field] / documentsWithField[field]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf)\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: this._fields,\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata)\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n  this.metadata[term] = Object.create(null)\n  this.metadata[term][field] = clonedMetadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport * as lunr from 'lunr';\n/* just for better typings */\nvar Worker = /** @class */ (function () {\n    function Worker() {\n        this.add = add;\n        this.done = done;\n        this.search = search;\n        this.toJS = toJS;\n        this.load = load;\n    }\n    return Worker;\n}());\nexport default Worker;\nvar store = {};\nvar resolveIndex = function () {\n    throw new Error('Should not be called');\n};\nvar index = new Promise(function (resolve) {\n    resolveIndex = resolve;\n});\nvar builder = new lunr.Builder();\nbuilder.field('title');\nbuilder.field('description');\nbuilder.ref('id');\nbuilder.pipeline.add(lunr.trimmer, lunr.stopWordFilter, lunr.stemmer);\nvar expandTerm = function (term) { return '*' + lunr.stemmer(new lunr.Token(term, {})) + '*'; };\nexport function add(title, description, id) {\n    var item = { title: title, description: description, id: id };\n    builder.add(item);\n    store[id] = item;\n}\nexport function done() {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            resolveIndex(builder.build());\n            return [2 /*return*/];\n        });\n    });\n}\nexport function toJS() {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = {\n                        store: store\n                    };\n                    return [4 /*yield*/, index];\n                case 1: return [2 /*return*/, (_a.index = (_b.sent()).toJSON(),\n                        _a)];\n            }\n        });\n    });\n}\nexport function load(state) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            store = state.store;\n            resolveIndex(lunr.Index.load(state.index));\n            return [2 /*return*/];\n        });\n    });\n}\nexport function search(q) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (q.trim().length === 0) {\n                        return [2 /*return*/, []];\n                    }\n                    return [4 /*yield*/, index];\n                case 1: return [2 /*return*/, (_a.sent())\n                        .query(function (t) {\n                        q\n                            .trim()\n                            .split(/\\s+/)\n                            .forEach(function (term) {\n                            var exp = expandTerm(term);\n                            t.term(exp, {});\n                        });\n                    })\n                        .map(function (res) { return (__assign({}, store[res.ref], { score: res.score })); })];\n            }\n        });\n    });\n}\n\naddEventListener('message', function (e) {var ref = e.data;var type = ref.type;var method = ref.method;var id = ref.id;var params = ref.params;var f, p;if (type === 'RPC' && method) {if (f = __webpack_exports__[method]) {p = Promise.resolve().then(function () { return f.apply(__webpack_exports__, params); });} else {p = Promise.reject('No such method');}p.then(function (result) {postMessage({type: 'RPC',id: id,result: result});}, function (error) {postMessage({type: 'RPC',id: id,error: error});});}});postMessage({type: 'RPC',method: 'ready'});"],"sourceRoot":""}